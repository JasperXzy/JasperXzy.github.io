<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Selenium 自动化测试之纪念币预约</title>
    <link href="/article/auto_commemorative_coin_booking.html"/>
    <url>/article/auto_commemorative_coin_booking.html</url>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>前段时间，2023 贺岁纪念币的预约火热地进行着，当晚我也凭借惊人的手速抢到了 3 *20 &#x3D; 60 个，某天偶然打开农行预约纪念币网的站，发现预约端口还未关闭，便想着用 Selenium 自动化测试来实现全自动预约纪念币。</p><p class="note note-info">本文使用的技术包括但不仅限于：Python、Selenium-Python、OCR、CNN、Android adb</p><p class="note note-warning">声明：本文只用于技术分享，禁止使用本文代码参与各种不当获利行为</p><h1 id="Part-I：基本-Selenium-自动化"><a href="#Part-I：基本-Selenium-自动化" class="headerlink" title="Part I：基本 Selenium 自动化"></a>Part I：基本 Selenium 自动化</h1><p>打开<a href="https://eapply.abchina.com/coin/coin/Index">农行纪念币预约网址</a>，进入纪念币预约，可见布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/welcome_page.png" alt="welcome_page"></p><p>接下来就是基本的 Selenium 自动化了，<code>F12</code>打开开发者工具，查看 “ 预约 ” 的 Xpath，但通过两次纪念币预约，我发现该元素的 Xpath 是随纪念币更改的，故每次要提前进入该网址获取本次预约的 Xpath。</p><p class="info">将所有配置文件放在<code>general_settings.py</code>方便管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 驱动路径</span><br>path_chrome = Service_Chrome(<span class="hljs-string">&quot;../driver/chromedriver.exe&quot;</span>)<br><br><span class="hljs-comment"># 预约链接</span><br>booking_url = <span class="hljs-string">&quot;https://eapply.abchina.com/coin/Coin/CoinIssuesDistribution?typeid=202301&quot;</span><br><br><span class="hljs-comment"># 预约界面 Xpath</span><br>welcome_page_xpath = <span class="hljs-string">&#x27;/html/body/div[5]/div[2]/table/tbody/tr[5]/td[4]/input[1]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br>browser = webdriver.Chrome(service=general_settings.path_chrome)  <span class="hljs-comment"># 使用 Chrome 驱动</span><br>browser.get(general_settings.booking_url)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome_page</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    欢迎页面</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, general_settings.welcome_page_xpath).click()<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;I128&quot;]/button[1]&#x27;</span>).click()  <span class="hljs-comment"># 同意并继续</span><br></code></pre></td></tr></table></figure><p>接下来，进入今天我们的主战场，布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/booking_main.png" alt="booking_main"></p><p>我将此页面分为如下五个部分：</p><ol><li>基本个人信息（姓名、证件号码、手机号码）</li><li>图形验证码</li><li>短信验证码</li><li>兑换网点</li><li>兑换时间</li></ol><p>其中，1、4、5 在本 Part 展示，2、3 将在下文展示。</p><h2 id="1-基本个人信息"><a href="#1-基本个人信息" class="headerlink" title="1. 基本个人信息"></a>1. 基本个人信息</h2><p>由于本次自动化是多线程同时进行，且为了个人信息安全和后期再有纪念币预约可以直接使用，故将个人信息放入 MySQL 数据库中，使用 Python 第三方库 pymysql 获取数据库信息并填写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 数据库信息</span><br>host = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 主机名（IP）</span><br>port = <span class="hljs-number">3306</span>  <span class="hljs-comment"># 数据库端口，默认为 3306</span><br>user = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 数据库用户名</span><br>password = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 数据库密码</span><br>database = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 信息所在 database（数据库）</span><br>table = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 信息所在 table（表）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_get</span>(<span class="hljs-params">host: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span>, user: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, database: <span class="hljs-built_in">str</span>, table: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    通过 MySQL 数据库获取信息</span><br><span class="hljs-string">    :param host: 主机名（IP）</span><br><span class="hljs-string">    :param port: 数据库端口</span><br><span class="hljs-string">    :param user: 数据库用户名</span><br><span class="hljs-string">    :param password: 数据库密码</span><br><span class="hljs-string">    :param database: 信息所在 database</span><br><span class="hljs-string">    :param table: 信息所在 table</span><br><span class="hljs-string">    :return: 信息的元组</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    info_MySQL = Connection(<br>        host=host,<br>        port=port,<br>        user=user,<br>        password=password<br>    )  <span class="hljs-comment"># 连接数据库</span><br>    cursor = info_MySQL.cursor() <br>    info_MySQL.select_db(database)  <br>    cursor.execute(<span class="hljs-string">f&#x27;SELECT *  FROM <span class="hljs-subst">&#123;table&#125;</span>;&#x27;</span>)<br>    result = cursor.fetchall()  <span class="hljs-comment"># 获取所有信息</span><br>    info_mysql = result[thread_index]  <span class="hljs-comment"># 获取对应进程的个人信息</span><br>    cursor.close()<br>    info_MySQL.close()<br>    <span class="hljs-keyword">return</span> info_mysql<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_info</span>(<span class="hljs-params">info: <span class="hljs-built_in">tuple</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    填写信息函数</span><br><span class="hljs-string">    :param info: 信息元组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;name&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 姓名</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;identNo&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 身份证号</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;mobile&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">3</span>])  <span class="hljs-comment"># 电话号码</span><br></code></pre></td></tr></table></figure><h2 id="2-兑换网点"><a href="#2-兑换网点" class="headerlink" title="2. 兑换网点"></a>2. 兑换网点</h2><p>兑换网点是一个下拉框对象，可以使用 Selenium 中 Select 函数对网点进行选择。省行、分行、支行都很顺利，但营业处选项遇到了一些问题，营业处的文本为 “营业处 + 当前剩余纪念币数”，若使用<code>select_by_index</code>会导致不知道默认选择的营业处是否还有纪念币。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/problem_place.png" alt="problem_place"></p><p>故做以下修改：先选择默认营业处，若默认营业处剩余纪念币数 &lt;&#x3D; 20，则对营业处的列表进行遍历，选择剩余纪念币数 &gt;&#x3D; 20 的营业处，若都没有剩余，则输出 “ 该营业处没有剩余纪念币 ”。当然，你也可以再对支行、分行甚至省行（只要你能跑）的列表进行遍历，选择有剩余的营业处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 预约地址</span><br>place_arr = [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">4</span>]  <span class="hljs-comment"># 分别为 [省行, 分行, 支行, 默认营业厅序号（从 1 开始为第一个）]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_place</span>(<span class="hljs-params">province: <span class="hljs-built_in">str</span>, city: <span class="hljs-built_in">str</span>, country: <span class="hljs-built_in">str</span>, default_bank_index: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    选择兑换网点</span><br><span class="hljs-string">    :param province: 省行名称</span><br><span class="hljs-string">    :param city: 分行名称</span><br><span class="hljs-string">    :param country: 支行名称</span><br><span class="hljs-string">    :param default_bank_index: 默认营业处序号（从 1 开始为第一个营业处）</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    select_province = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel1&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择省行</span><br>    Select(select_province).select_by_visible_text(province)<br>  <br>select_city = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel2&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择分行</span><br>    Select(select_city).select_by_visible_text(city)<br><br>    select_country = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel3&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择支行</span><br>    Select(select_country).select_by_visible_text(country)<br><br>    select_bank = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel4&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择营业处</span><br>    bank_text = select_bank.text<br>    bank_arr = bank_text.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>    default_coin_number = bank_arr[default_bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br><br>    <span class="hljs-comment"># 判断该营业处是否有剩余纪念币</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(default_coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>        Select(select_bank).select_by_index(default_bank_index)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> bank_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(bank_arr)):<br>            coin_number = bank_arr[bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>                Select(select_bank).select_by_index(bank_index)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进程<span class="hljs-subst">&#123;thread_index&#125;</span> 没有营业厅有纪念币了...&quot;</span>)<br>                <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="3-兑换时间"><a href="#3-兑换时间" class="headerlink" title="3. 兑换时间"></a>3. 兑换时间</h2><p>选择时间可以通过两次定位来实现，但是速度较慢且 Xpath 路径不好写，且有时会涉及到 frame ，此时需要切换 frame，比较麻烦。所以本文使用 js 来处理时间控件，实现原理为删除 input 的 readonly 属性，直接输入日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 兑换时间</span><br>coindate = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 按照&#x27;年-月-日&#x27;输入日期，例如：&#x27;2023-01-01&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coin_date</span>(<span class="hljs-params">coindate: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    选择兑换时间</span><br><span class="hljs-string">    :param coindate: 兑换时间</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    js_date = <span class="hljs-string">&#x27;document.getElementById(&quot;coindate&quot;).removeAttribute(&quot;readonly&quot;);&#x27;</span>  <span class="hljs-comment"># 执行 js 代码去除 readonly 属性</span><br>    browser.execute_script(js_date)<br>    browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).clear()  <span class="hljs-comment"># 清除输入框</span><br>    browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).send_keys(coindate)  <span class="hljs-comment"># 输入日期</span><br></code></pre></td></tr></table></figure><p>至此，基本的 Selenium 自动化已经完成。接下来，就是本文的核心：图像验证码与短信验证码。</p><h1 id="Part-II：图形验证码"><a href="#Part-II：图形验证码" class="headerlink" title="Part II：图形验证码"></a>Part II：图形验证码</h1><h2 id="1-图形验证码数据集获取"><a href="#1-图形验证码数据集获取" class="headerlink" title="1. 图形验证码数据集获取"></a>1. 图形验证码数据集获取</h2><p>既然选择用深度学习识别验证码，首先就是获取验证码数据集。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha_url.png" alt="pic_captcha_url"></p><p>在预约界面查找元素可知验证码的 src，刷新后会显示不同的图形验证码，这样图形验证码的数据源就搞定了。下面就是使用 requests 库爬取图形验证码，并以二进制方式写入到本地文件，这里一共爬取 3000 张验证码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># captcha_get.py</span><br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">f&#x27;https://eapply.abchina.com/coin/Helper/ValidCode.ashx&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>)<br><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3000</span>):<br>    file = <span class="hljs-string">f&#x27;./pic_captcha/captcha_<span class="hljs-subst">&#123;index&#125;</span>.png&#x27;</span><br>    re = requests.get(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(re.content)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;captcha_<span class="hljs-subst">&#123;index&#125;</span> finished...&#x27;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>但由于这些验证码之后还需要进行标注，比较麻烦，特此将我用 2captcha 标注好的 3000 张验证码贴出来，格式为 “ 验证码_piccaptcha+hash.png “。（别问我为什么不直接用 2captcha，因为一个验证码要 5 s，这速度还不如直接手动输入）</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha.png" alt="pic_captcha"></p><p><a class="btn" href="https://www.kaggle.com/datasets/jasperxzy/pic-captcha-abc/download?datasetVersionNumber=1" title="Dataset">下载数据集 - Kaggle</a></p><p><a class="btn" href="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/PIC_CAPTCHA.zip" title="Dataset">下载数据集 - AliCloud</a></p><h2 id="2-训练模型"><a href="#2-训练模型" class="headerlink" title="2. 训练模型"></a>2. 训练模型</h2><p>下面介绍本文采用的 CNN 模型 ocr_jasper，基于 mobildenetv2 修改而来，下图为网络结构。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/ocr_jasper_network.png" alt="ocr_jasper_network"></p><p>训练代码在此就不详细说明了，详情可看仓库中 ” ocr_jasper_train “ 内的 <code>README.md</code> 。训练完成后，会得到 <code>model.onnx</code> 和 <code>charsets.json</code> 两个文件，分别为模型文件和字符集文件，这两个文件需配合 ocr_jasper 库使用。</p><h2 id="3-获取页面中图形验证码"><a href="#3-获取页面中图形验证码" class="headerlink" title="3. 获取页面中图形验证码"></a>3. 获取页面中图形验证码</h2><p>上文爬取验证码时提到过，图形验证码的数据源是一条链接，所以无法直接通过链接直接下载图形验证码，故对图形验证码的元素进行截图并保存，方便 ocr_jasper 调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_save</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    定位验证码进行截图</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    captcha_img = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccaptcha&quot;]&#x27;</span>)  <span class="hljs-comment"># 要截图的元素</span><br>    x, y = captcha_img.location.values()  <span class="hljs-comment"># 坐标</span><br>    h, w = captcha_img.size.values()  <span class="hljs-comment"># 宽高</span><br>    image_data = browser.get_screenshot_as_png()  <span class="hljs-comment"># 把截图以二进制形式的数据返回</span><br>    screenshot = Image.<span class="hljs-built_in">open</span>(BytesIO(image_data))  <span class="hljs-comment"># 以新图片打开返回的数据</span><br>    result = screenshot.crop((x, y, x + w, y + h))  <span class="hljs-comment"># 对截图进行裁剪</span><br>    result.save(<span class="hljs-string">f&#x27;./Captcha/pic_captcha_thread<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-使用-ocr-jasper-识别图形验证码"><a href="#4-使用-ocr-jasper-识别图形验证码" class="headerlink" title="4. 使用 ocr_jasper 识别图形验证码"></a>4. 使用 ocr_jasper 识别图形验证码</h2><p>现在，就可以通过调用 ocr_jasper 来对图形验证码进行识别了，ocr_jasper 可以从本文的仓库中获取，在 CMD 或 Anaconda Prompt 中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install &#123;ocr_jasper&#125; <span class="hljs-comment"># 将 &#123;ocr_jasper&#125; 替换为 ocr_jasper 的相对或绝对路径 </span><br></code></pre></td></tr></table></figure><p>接下来就可以在代码中调用 ocr_jasper 了，将代码中<code>import_onnx_path</code>和<code>charsets_path</code>修改为训练好的模型和字符集文件的相对或绝对路径，默认放在项目根目录下的 Models 文件夹中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_recognition</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 ocr_jasper 识别图形验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ocr_pic = ocr_jasper.OCR(import_onnx_path=<span class="hljs-string">&#x27;./Models/model.onnx&#x27;</span>,charsets_path=<span class="hljs-string">&quot;./Models/charsets.json&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/pic_captcha_thread<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        image = f.read()<br>    captcha_recognized = ocr_pic.classification(image)<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccode&quot;]&#x27;</span>).send_keys(captcha_recognized)  <span class="hljs-comment"># 验证码输入框</span><br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text_captcha</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取短信验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;sendValidate&quot;]&#x27;</span>).click() <br></code></pre></td></tr></table></figure><h2 id="5-判断图形验证码是否识别正确"><a href="#5-判断图形验证码是否识别正确" class="headerlink" title="5. 判断图形验证码是否识别正确"></a>5. 判断图形验证码是否识别正确</h2><p>有时 ocr 会抽风，无法正确识别图形验证码，在此添加一个函数来判断是否识别正确。当识别错误时，id 为 <code>errorCaptchaNo</code>的元素会变成 ” 图形验证码错误 “；识别正确时，会变为 ” 短信验证码已发送成功 “，所以可以通过该元素文本长度来判断图形验证码是否识别正确。又因为<code>captcha_success</code>变量会跨函数多次调用，故将其定义为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">captcha</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断图形验证码是否正确</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> captcha_success<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pic_captcha_save()<br>        time.sleep(<span class="hljs-number">1</span>)<br>        pic_captcha_recognition()<br>        get_text_captcha()<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        is_captcha_error = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;errorCaptchaNo&quot;]&#x27;</span>).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(is_captcha_error) == <span class="hljs-number">7</span>:<br>            browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccaptcha&quot;]&#x27;</span>).click()  <span class="hljs-comment"># 重新获取验证码</span><br>            browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccode&quot;]&#x27;</span>).clear()<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(is_captcha_error) == <span class="hljs-number">10</span>:<br>            captcha_success = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="Part-III：短信验证码"><a href="#Part-III：短信验证码" class="headerlink" title="Part III：短信验证码"></a>Part III：短信验证码</h1><p>安卓系统获取手机短信验证码的方式有多种，可以通过短信数据库<code>mmssms.db</code>（需 root）或其他第三方平台进行获取，本文选择 adb 手机截屏 + ocr_jasper 识别的解决方案。（尊贵的 iOS 用户请自行解决本 Part）</p><h2 id="1-截图并裁剪短信验证码"><a href="#1-截图并裁剪短信验证码" class="headerlink" title="1. 截图并裁剪短信验证码"></a>1. 截图并裁剪短信验证码</h2><p>在电脑上装好对应的手机驱动，手机打开开发者模式并开启 USB 调试，将手机通过 adb 连接到电脑后，可通过<code>adb devices</code>查看是否连接成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 短信验证码剪裁范围，坐标为 [y_0: y_1, x_0: x_1]</span><br>y_0 = <span class="hljs-number">1550</span><br>y_1 = <span class="hljs-number">1620</span><br>x_0 = <span class="hljs-number">125</span><br>x_1 = <span class="hljs-number">345</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_save</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    保存验证码的屏幕截图并裁剪验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    text_captcha_path = <span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span><br>    os.system(<span class="hljs-string">&#x27;adb shell screencap -p &gt; &#x27;</span> + text_captcha_path)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(text_captcha_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    text_captcha = data.replace(<span class="hljs-string">b&#x27;\r\n&#x27;</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(text_captcha)<br>    raw_image = cv2.imread(<span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>)<br>    cropped_image = raw_image[general_settings.y_0:general_settings.y_1, general_settings.x_0:general_settings.x_1] <br>    cv2.imwrite(<span class="hljs-string">f&#x27;./Captcha/text_captcha_<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, cropped_image)<br></code></pre></td></tr></table></figure><h2 id="2-使用-ocr-jasper-识别短信验证码"><a href="#2-使用-ocr-jasper-识别短信验证码" class="headerlink" title="2. 使用 ocr_jasper 识别短信验证码"></a>2. 使用 ocr_jasper 识别短信验证码</h2><p>和上文一样，调用 ocr_jasper 识别短信验证码，但本次不需要指定<code>import_onnx_path</code>和<code>charsets_path</code>，因为 ocr_jasper 内置了一个通用模型，对数字识别准确率接近 100%，而上文不使用内置模型的原因是此模型还包括 Unicode 编码中的所有汉字，会对图形验证码识别准确率有较大影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_recognition</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    短信验证码识别</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ocr_text = ocr_jasper.OCR(use_gpu=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/text_captcha_<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        image = f.read()<br>    captcha_recognized = ocr_text.classification(image)<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;phoneCaptchaNo&quot;]&#x27;</span>).send_keys(captcha_recognized)<br></code></pre></td></tr></table></figure><h2 id="3-信息提交"><a href="#3-信息提交" class="headerlink" title="3. 信息提交"></a>3. 信息提交</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_submit</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    提交信息函数</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;infosubmit&quot;]&#x27;</span>).click() <br></code></pre></td></tr></table></figure><h1 id="Part-IV：主进程函数与多线程"><a href="#Part-IV：主进程函数与多线程" class="headerlink" title="Part IV：主进程函数与多线程"></a>Part IV：主进程函数与多线程</h1><p>由于全局变量跨文件使用比较麻烦，故将上述代码封装到主进程函数<code>main_func</code>函数中，结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main_func</span>(<span class="hljs-params">thread_index: <span class="hljs-built_in">int</span>, place: <span class="hljs-built_in">list</span>, date: <span class="hljs-built_in">str</span>, input_enable: <span class="hljs-built_in">bool</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主进程</span><br><span class="hljs-string">    :param thread_index: 进程序号</span><br><span class="hljs-string">    :param place: 预约地址列表</span><br><span class="hljs-string">    :param date: 预约时间</span><br><span class="hljs-string">    :param input_enable: 是否为最后一个进程</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> captcha_success<br>    browser = webdriver.Chrome(service=general_settings.path_chrome)<br>    browser.get(general_settings.booking_url)<br>    <br>    ---------functions mentioned above---------<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome_page</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_get</span>(<span class="hljs-params">host: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span>, user: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, database: <span class="hljs-built_in">str</span>, table: <span class="hljs-built_in">str</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_info</span>(<span class="hljs-params">info: <span class="hljs-built_in">tuple</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_place</span>(<span class="hljs-params">province: <span class="hljs-built_in">str</span>, city: <span class="hljs-built_in">str</span>, country: <span class="hljs-built_in">str</span>, default_bank_index: <span class="hljs-built_in">int</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">coin_date</span>(<span class="hljs-params">coindate: <span class="hljs-built_in">str</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_save</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_recognition</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text_captcha</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">captcha</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_save</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_recognition</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_submit</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">try</span>:<br>        welcome_page()<br>        info_tuple = info_get(host=general_settings.host,<br>                              port=general_settings.port,<br>                              user=general_settings.user,<br>                              password=general_settings.password,<br>                              database=general_settings.database,<br>                              table=general_settings.table)<br>        fill_info(info=info_tuple)<br>        choose_place(place[<span class="hljs-number">0</span>], place[<span class="hljs-number">1</span>], place[<span class="hljs-number">2</span>], place[<span class="hljs-number">3</span>])<br>        coin_date(coindate=date)<br>        captcha()<br>        time.sleep(<span class="hljs-number">3</span>)<br>        text_captcha_save()<br>        text_captcha_recognition()<br>        info_submit()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">if</span> input_enable:<br>        <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><p>既然是 Selenium 自动化调试，就要充分发挥多线程的优势，但由于短信验证码只能挨个获取，所以在此项目中以短信验证码成功发送作为下一个进程开始的标志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br>is_input_enable = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> current_thread <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(general_settings.threads):<br>    <span class="hljs-keyword">if</span> current_thread == general_settings.threads - <span class="hljs-number">1</span>:<br>        is_input_enable = <span class="hljs-literal">True</span><br>    threading.Thread(target=main_func, args=(current_thread,<br>                                             general_settings.place_arr,<br>                                             general_settings.coindate,<br>                                             is_input_enable)).start()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> captcha_success:<br>            time.sleep(<span class="hljs-number">1</span>)<br>            captcha_success = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><ul><li><p>经过测试，预约 10 人的时间在 45 - 55 s 左右，速度还可以，但有些地方还可以再优化，如加载 csv 文件获取个人信息、使用多台手机同时接受短信验证码等，上述功能可能会在以后的更新中添加。</p></li><li><p>拖慢本程序的罪魁祸首是短信验证码发送的延迟，实测大约在 3.5 s 左右，像中行和工商银行等不需要短信验证的网站，速度将会直接起飞。</p></li><li><p>个人博客：<a href="https://blog.jasperxzy.com/">JasperX’s Blog</a></p></li><li><p>本文仓库：<a href="https://github.com/JasperXzy/auto_commemorative_coin_booking">Github</a></p></li></ul><p>以上就是本次自动化测试预约纪念币的所有内容了，如果你喜欢我，欢迎关注我的 <a href="https://blog.csdn.net/JasperXzy">CSDN</a>、<a href="https://www.zhihu.com/people/jasper-xu-36">知乎</a>，或者在下方留下你的评论，Bye！</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
      <tag>Python</tag>
      
      <tag>OCR</tag>
      
      <tag>CNN</tag>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
