<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>YOLOv8 预览与使用指南</title>
    <link href="/article/yolov8_preview_and_guide.html"/>
    <url>/article/yolov8_preview_and_guide.html</url>
    
    <content type="html"><![CDATA[<h1>摘要</h1><p>YOLOv8 是最新的最先进的 YOLO 模型，可用于对象检测、图像分类和实例分割任务。YOLOv8 由 Ultralytics 开发的一个前沿的 SOTA 模型，它在以前成功的 YOLO 版本基础上，引入了新的功能和改进，进一步提升了其性能和灵活性。下面将分析 YOLOv8 的改进以及如何在 MSCOCO2017 数据集上训练 YOLOv8。</p><h1>YOLOv8 性能预览</h1><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/yolo_comparison_plots.png" alt="yolo_comparison_plots"></p><p>不难看出，YOLOv8 的性能比 YOLO 的其他模型在参数数量相似的情况下都具有更好的精度。</p><h1>YOLOv8 的改进与创新</h1><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/yolov8_structure.png" alt="yolov8_structure"></p><p>YOLOv8 的改进与创新有以下几点：</p><h2 id="1-Head">1. Head</h2><p>Head部分的变化最大，YOLOv5 采用耦合头（Coupled Head）和 Anchor Based 策略，YOLOv8 选择解耦头（Decoupled Head）和 Anchor Free 策略，不再有之前的 Objectness 分支，只有解耦的分类和回归分支。由于使用了 DFL 的思想，因此回归头的通道数也变成了 4 * reg_max 的形式。</p><p>众所周知，锚框是早期 YOLO 模型中的棘手部分，因为它们可能代表目标基准框的分布，而不是自定义数据集的分布。YOLOv8抛弃了以往的 Anchor Base，使用了 Anchor Free 的思想。所以，YOLOv8 是一个无锚模型，这意味着它直接预测对象的中心而不是已知锚框的偏移量。Anchor Free 检测减少了框预测的数量，从而加速了非最大抑制（NMS）。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/anchor_box.png" alt="anchor_box"></p><h2 id="2-Backbone">2. Backbone</h2><p>YOLOv5 中的 C3 模块被替换成了 C2f 模块，就是参考了 C3 模块以及 ELAN 的思想进行的设计，实现了进一步的轻量化，还能获得更加丰富的梯度流信息，同时 YOLOv8 依旧使用了 YOLOv5 等模型中使用的 SPPF 模块。模块总结如下图所示，其中 “f” 是特征数量，“e” 是膨胀率，CBS 是由 Conv、BatchNorm 和 SiLU 组成的块。在 C2f 中，第一个 6 x 6 转换被 3 x 3 取代。在 C2f 中，所有输出（两个残差连接的 3 x 3 卷积）被连接起来，而在 C3 中，只使用最后一个输出。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/c2f.png" alt="yolov8_c2f"></p><h2 id="3-PAN-FPN">3. PAN FPN</h2><p>YOLOv8 将 C3 模块和 RepBlock 替换为了 C2f 模块，同时 YOLOv8 选择将上采样之前的 1 × 1 卷积去除，将 Backbone 不同阶段输出的特征直接送入了上采样操作。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/yolov8_panfpn.png" alt="yolov8_panfpn"></p><h2 id="4-损失函数">4. 损失函数</h2><p>YOLOv8 的分类损失为 VFL Loss（<a href="https://arxiv.org/abs/2008.13367">VarifocalNet: An IoU-aware Dense Object Detector</a>），回归损失为 CIOU Loss（<a href="https://arxiv.org/abs/2006.04388">Generalized Focal Loss: Learning Qualified and Distributed Bounding Boxes for Dense Object Detection</a>） + DFL 的形式，Reg_max 默认为16。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi><mi mathvariant="normal">L</mi></mrow><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{\rm{DFL}}({S_i},{S_{i + 1}}) =  - (({y_{i + 1}} - y)\log ({S_i}) + (y - {y_i})\log ({S_{i + 1}}))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathrm">DFL</span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">((</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span></span></p><h2 id="5-样本匹配">5. 样本匹配</h2><p>YOLOv8 抛弃了以往的 IOU 匹配或者单边比例的分配方式，而是使用了 Task Aligned Assigner 匹配方式。</p><p>为与 NMS 搭配，训练样例的 Anchor 分配需要满足以下两个规则：</p><ol><li>正常对齐的 Anchor 应当可以预测高分类得分，同时具有精确定位；</li><li>不对齐的 Anchor 应当具有低分类得分，并在 NMS 阶段被抑制。基于上述两个目标，Task Aligned 设计了一个新的 Anchor alignment metric 来在 Anchor level 衡量Task Alignment 的水平。并且，Alignment metric 被集成在了 sample 分配和 loss function 里来动态的优化每个 Anchor 的预测。</li></ol><p>Anchor alignment metric：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><msup><mi>s</mi><mi>α</mi></msup><mo>×</mo><msup><mi>u</mi><mi>β</mi></msup></mrow><annotation encoding="application/x-tex">t = {s^\alpha } \times {u^\beta }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7977em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>s 和 u 分别为分类得分和 IoU 值，α 和 β 为权重超参数。t 可以同时控制分类得分和 IoU 的优化来实现 Task Alignment，也可以引导网络动态的关注于高质量的Anchor。</p><h1>YOLOv8 训练</h1><p>本文将使用 MSCOCO2017 数据集在 YOLOv8 上训练。</p><h2 id="1-安装环境">1. 安装环境</h2><p>YOLOv8 需要 3.10 &gt;= <a href="https://www.python.org/"><strong>Python</strong></a> &gt;=3.7，<a href="https://pytorch.org/get-started/locally/"><strong>PyTorch</strong></a> &gt;=1.7，本文使用 Python 3.8.10，PyTorch 1.11.0 + cu113。</p><p>本文运行环境为：Ubuntu 20.04 TLS，60 Cores，120 GB Menory，4 x NVIDIA A5000 24 GB</p><p>目前 YOLOv8 核心代码都封装在 <a href="https://github.com/ultralytics/ultralytics">ultralytics</a> 这个依赖包里面，可以通过 pip（推荐）或 git clone 来安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install ultralytics<br></code></pre></td></tr></table></figure><h2 id="2-数据集">2. 数据集</h2><p>首先，下载 <a href="http://images.cocodataset.org/">MSCOCO2017</a> 数据集与 <a href="https://github.com/ultralytics/yolov5/releases/download/v1.0/coco2017labels.zip">COCO labels</a>.</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/download_dataset.png" alt="download_dataset"></p><p>将 train2017.zip，test2017.zip，val2017.zip 解压至 images 下，coco2017labels.zip 解压至 labels 下，数据集目录应为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">coco2017<br>--iamges<br>----test2017<br>----train2017<br>----val2017<br>--labels<br>----test2017<br>----train2017<br>--test-dev2017.txt<br>--train2017.txt<br>--test2017.txt<br></code></pre></td></tr></table></figure><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/files.png" alt="content_path"></p><p>在你想要存放运行文件的目录下新建一个 coco.yaml，将 path 后的地址改为存放 MSCOCO 数据集的目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">path:</span> <span class="hljs-string">/root/deep_learning/datasets/coco</span>  <span class="hljs-comment"># dataset root dir</span><br><span class="hljs-attr">train:</span> <span class="hljs-string">train2017.txt</span>  <span class="hljs-comment"># train images (relative to &#x27;path&#x27;) 118287 images</span><br><span class="hljs-attr">val:</span> <span class="hljs-string">val2017.txt</span>  <span class="hljs-comment"># val images (relative to &#x27;path&#x27;) 5000 images</span><br><span class="hljs-attr">test:</span> <span class="hljs-string">test-dev2017.txt</span>  <span class="hljs-comment"># 20288 of 40670 images, submit to https://competitions.codalab.org/competitions/20794</span><br><br><span class="hljs-comment"># Classes</span><br><span class="hljs-attr">names:</span><br>  <span class="hljs-attr">0:</span> <span class="hljs-string">person</span><br>  <span class="hljs-attr">1:</span> <span class="hljs-string">bicycle</span><br>  <span class="hljs-attr">2:</span> <span class="hljs-string">car</span><br>  <span class="hljs-attr">3:</span> <span class="hljs-string">motorcycle</span><br>  <span class="hljs-attr">4:</span> <span class="hljs-string">airplane</span><br>  <span class="hljs-attr">5:</span> <span class="hljs-string">bus</span><br>  <span class="hljs-attr">6:</span> <span class="hljs-string">train</span><br>  <span class="hljs-attr">7:</span> <span class="hljs-string">truck</span><br>  <span class="hljs-attr">8:</span> <span class="hljs-string">boat</span><br>  <span class="hljs-attr">9:</span> <span class="hljs-string">traffic</span> <span class="hljs-string">light</span><br>  <span class="hljs-attr">10:</span> <span class="hljs-string">fire</span> <span class="hljs-string">hydrant</span><br>  <span class="hljs-attr">11:</span> <span class="hljs-string">stop</span> <span class="hljs-string">sign</span><br>  <span class="hljs-attr">12:</span> <span class="hljs-string">parking</span> <span class="hljs-string">meter</span><br>  <span class="hljs-attr">13:</span> <span class="hljs-string">bench</span><br>  <span class="hljs-attr">14:</span> <span class="hljs-string">bird</span><br>  <span class="hljs-attr">15:</span> <span class="hljs-string">cat</span><br>  <span class="hljs-attr">16:</span> <span class="hljs-string">dog</span><br>  <span class="hljs-attr">17:</span> <span class="hljs-string">horse</span><br>  <span class="hljs-attr">18:</span> <span class="hljs-string">sheep</span><br>  <span class="hljs-attr">19:</span> <span class="hljs-string">cow</span><br>  <span class="hljs-attr">20:</span> <span class="hljs-string">elephant</span><br>  <span class="hljs-attr">21:</span> <span class="hljs-string">bear</span><br>  <span class="hljs-attr">22:</span> <span class="hljs-string">zebra</span><br>  <span class="hljs-attr">23:</span> <span class="hljs-string">giraffe</span><br>  <span class="hljs-attr">24:</span> <span class="hljs-string">backpack</span><br>  <span class="hljs-attr">25:</span> <span class="hljs-string">umbrella</span><br>  <span class="hljs-attr">26:</span> <span class="hljs-string">handbag</span><br>  <span class="hljs-attr">27:</span> <span class="hljs-string">tie</span><br>  <span class="hljs-attr">28:</span> <span class="hljs-string">suitcase</span><br>  <span class="hljs-attr">29:</span> <span class="hljs-string">frisbee</span><br>  <span class="hljs-attr">30:</span> <span class="hljs-string">skis</span><br>  <span class="hljs-attr">31:</span> <span class="hljs-string">snowboard</span><br>  <span class="hljs-attr">32:</span> <span class="hljs-string">sports</span> <span class="hljs-string">ball</span><br>  <span class="hljs-attr">33:</span> <span class="hljs-string">kite</span><br>  <span class="hljs-attr">34:</span> <span class="hljs-string">baseball</span> <span class="hljs-string">bat</span><br>  <span class="hljs-attr">35:</span> <span class="hljs-string">baseball</span> <span class="hljs-string">glove</span><br>  <span class="hljs-attr">36:</span> <span class="hljs-string">skateboard</span><br>  <span class="hljs-attr">37:</span> <span class="hljs-string">surfboard</span><br>  <span class="hljs-attr">38:</span> <span class="hljs-string">tennis</span> <span class="hljs-string">racket</span><br>  <span class="hljs-attr">39:</span> <span class="hljs-string">bottle</span><br>  <span class="hljs-attr">40:</span> <span class="hljs-string">wine</span> <span class="hljs-string">glass</span><br>  <span class="hljs-attr">41:</span> <span class="hljs-string">cup</span><br>  <span class="hljs-attr">42:</span> <span class="hljs-string">fork</span><br>  <span class="hljs-attr">43:</span> <span class="hljs-string">knife</span><br>  <span class="hljs-attr">44:</span> <span class="hljs-string">spoon</span><br>  <span class="hljs-attr">45:</span> <span class="hljs-string">bowl</span><br>  <span class="hljs-attr">46:</span> <span class="hljs-string">banana</span><br>  <span class="hljs-attr">47:</span> <span class="hljs-string">apple</span><br>  <span class="hljs-attr">48:</span> <span class="hljs-string">sandwich</span><br>  <span class="hljs-attr">49:</span> <span class="hljs-string">orange</span><br>  <span class="hljs-attr">50:</span> <span class="hljs-string">broccoli</span><br>  <span class="hljs-attr">51:</span> <span class="hljs-string">carrot</span><br>  <span class="hljs-attr">52:</span> <span class="hljs-string">hot</span> <span class="hljs-string">dog</span><br>  <span class="hljs-attr">53:</span> <span class="hljs-string">pizza</span><br>  <span class="hljs-attr">54:</span> <span class="hljs-string">donut</span><br>  <span class="hljs-attr">55:</span> <span class="hljs-string">cake</span><br>  <span class="hljs-attr">56:</span> <span class="hljs-string">chair</span><br>  <span class="hljs-attr">57:</span> <span class="hljs-string">couch</span><br>  <span class="hljs-attr">58:</span> <span class="hljs-string">potted</span> <span class="hljs-string">plant</span><br>  <span class="hljs-attr">59:</span> <span class="hljs-string">bed</span><br>  <span class="hljs-attr">60:</span> <span class="hljs-string">dining</span> <span class="hljs-string">table</span><br>  <span class="hljs-attr">61:</span> <span class="hljs-string">toilet</span><br>  <span class="hljs-attr">62:</span> <span class="hljs-string">tv</span><br>  <span class="hljs-attr">63:</span> <span class="hljs-string">laptop</span><br>  <span class="hljs-attr">64:</span> <span class="hljs-string">mouse</span><br>  <span class="hljs-attr">65:</span> <span class="hljs-string">remote</span><br>  <span class="hljs-attr">66:</span> <span class="hljs-string">keyboard</span><br>  <span class="hljs-attr">67:</span> <span class="hljs-string">cell</span> <span class="hljs-string">phone</span><br>  <span class="hljs-attr">68:</span> <span class="hljs-string">microwave</span><br>  <span class="hljs-attr">69:</span> <span class="hljs-string">oven</span><br>  <span class="hljs-attr">70:</span> <span class="hljs-string">toaster</span><br>  <span class="hljs-attr">71:</span> <span class="hljs-string">sink</span><br>  <span class="hljs-attr">72:</span> <span class="hljs-string">refrigerator</span><br>  <span class="hljs-attr">73:</span> <span class="hljs-string">book</span><br>  <span class="hljs-attr">74:</span> <span class="hljs-string">clock</span><br>  <span class="hljs-attr">75:</span> <span class="hljs-string">vase</span><br>  <span class="hljs-attr">76:</span> <span class="hljs-string">scissors</span><br>  <span class="hljs-attr">77:</span> <span class="hljs-string">teddy</span> <span class="hljs-string">bear</span><br>  <span class="hljs-attr">78:</span> <span class="hljs-string">hair</span> <span class="hljs-string">drier</span><br>  <span class="hljs-attr">79:</span> <span class="hljs-string">toothbrush</span><br></code></pre></td></tr></table></figure><h2 id="3-下载预训练模型">3. 下载预训练模型</h2><p>在 YOLOv8 的 <a href="https://github.com/ultralytics/assets/releases">GitHub</a> 网址上下载对应版本的预训练模型，若想从头开始训练，则可以定位到 site-packages/ultralytics/models/v8 下选择相应的 yaml 文件。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/model_config.png" alt="content_path"></p><h2 id="4-训练">4. 训练</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo task=detect mode=train model=<span class="hljs-string">&#x27;&#x27;</span> ...<br></code></pre></td></tr></table></figure><p>task，mode 为必选参数，其他可选参数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">model:  <span class="hljs-comment"># path to model file, i.e. yolov8n.pt, yolov8n.yaml</span><br>data:  <span class="hljs-comment"># path to data file, i.e. i.e. coco128.yaml</span><br>epochs: <span class="hljs-number">100</span>  <span class="hljs-comment"># number of epochs to train for</span><br>patience: <span class="hljs-number">50</span>  <span class="hljs-comment"># epochs to wait for no observable improvement for early stopping of training</span><br>batch: <span class="hljs-number">16</span>  <span class="hljs-comment"># number of images per batch (-1 for AutoBatch)</span><br>imgsz: <span class="hljs-number">640</span>  <span class="hljs-comment"># size of input images as integer or w,h</span><br>save: <span class="hljs-literal">True</span>  <span class="hljs-comment"># save train checkpoints and predict results</span><br>cache: <span class="hljs-literal">False</span>  <span class="hljs-comment"># True/ram, disk or False. Use cache for data loading</span><br>device:  <span class="hljs-comment"># device to run on, i.e. cuda device=0 or device=0,1,2,3 or device=cpu</span><br>workers: <span class="hljs-number">8</span>  <span class="hljs-comment"># number of worker threads for data loading (per RANK if DDP)</span><br>project:  <span class="hljs-comment"># project name</span><br>name:  <span class="hljs-comment"># experiment name</span><br>exist_ok: <span class="hljs-literal">False</span>  <span class="hljs-comment"># whether to overwrite existing experiment</span><br>pretrained: <span class="hljs-literal">False</span>  <span class="hljs-comment"># whether to use a pretrained model</span><br>optimizer: SGD  <span class="hljs-comment"># optimizer to use, choices=[&#x27;SGD&#x27;, &#x27;Adam&#x27;, &#x27;AdamW&#x27;, &#x27;RMSProp&#x27;]</span><br>verbose: <span class="hljs-literal">True</span>  <span class="hljs-comment"># whether to print verbose output</span><br>seed: <span class="hljs-number">0</span>  <span class="hljs-comment"># random seed for reproducibility</span><br>deterministic: <span class="hljs-literal">True</span>  <span class="hljs-comment"># whether to enable deterministic mode</span><br>single_cls: <span class="hljs-literal">False</span>  <span class="hljs-comment"># train multi-class data as single-class</span><br>image_weights: <span class="hljs-literal">False</span>  <span class="hljs-comment"># use weighted image selection for training</span><br>rect: <span class="hljs-literal">False</span>  <span class="hljs-comment"># support rectangular training</span><br>cos_lr: <span class="hljs-literal">False</span>  <span class="hljs-comment"># use cosine learning rate scheduler</span><br>close_mosaic: <span class="hljs-number">10</span>  <span class="hljs-comment"># disable mosaic augmentation for final 10 epochs</span><br>resume: <span class="hljs-literal">False</span>  <span class="hljs-comment"># resume training from last checkpoint</span><br></code></pre></td></tr></table></figure><p>主要填写 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">model  <span class="hljs-comment"># 预训练模型或初始模型路径</span><br>data  <span class="hljs-comment"># 上文 coco.yaml 的路径</span><br>epochs  <span class="hljs-comment"># 迭代轮数</span><br>batch  <span class="hljs-comment"># 根据显存调节</span><br>device  <span class="hljs-comment"># 调用显卡数量，如：0,1,2,3</span><br>workers  <span class="hljs-comment"># 调用 cpu 核心数）</span><br>resume  <span class="hljs-comment"># 是否为断点续训，若是，则需把 model 路径改为上次保存的 best.pt 的路径</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo task=detect mode=train model=yolov8n.pt data=coco.yaml epochs=100 batch=256 device=0,1,2,3 workers=56 resume=False<br></code></pre></td></tr></table></figure><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/train.png" alt="nvidia-smi"></p><p>可以通过 Tensorboard 查看运行过程，将 {path} 改为 train 文件夹的绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tensorboard --logdir=&#123;path&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/tensorboard.png" alt="tensorboard"></p><h2 id="5-导出模型">5. 导出模型</h2><p>训练完成后，会在运行目录下的 runs/detect/train/weights 目录下生成 <a href="http://best.pt">best.pt</a> 文件，此文件为训练出的最好的模型文件。</p><h1>YOLOv8 测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo task=detect mode=predict <span class="hljs-built_in">source</span>=<span class="hljs-string">&#x27;&#x27;</span>...<br></code></pre></td></tr></table></figure><p>task，mode 为必选参数，其他可选参数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">source:  <span class="hljs-comment"># source directory for images or videos</span><br>show: <span class="hljs-literal">False</span>  <span class="hljs-comment"># show results if possible</span><br>save_txt: <span class="hljs-literal">False</span>  <span class="hljs-comment"># save results as .txt file</span><br>save_conf: <span class="hljs-literal">False</span>  <span class="hljs-comment"># save results with confidence scores</span><br>save_crop: <span class="hljs-literal">False</span>  <span class="hljs-comment"># save cropped images with results</span><br>hide_labels: <span class="hljs-literal">False</span>  <span class="hljs-comment"># hide labels</span><br>hide_conf: <span class="hljs-literal">False</span>  <span class="hljs-comment"># hide confidence scores</span><br>vid_stride: <span class="hljs-number">1</span>  <span class="hljs-comment"># video frame-rate stride</span><br>line_thickness: <span class="hljs-number">3</span>  <span class="hljs-comment"># bounding box thickness (pixels)</span><br>visualize: <span class="hljs-literal">False</span>  <span class="hljs-comment"># visualize model features</span><br>augment: <span class="hljs-literal">False</span>  <span class="hljs-comment"># apply image augmentation to prediction sources</span><br>agnostic_nms: <span class="hljs-literal">False</span>  <span class="hljs-comment"># class-agnostic NMS</span><br>classes:  <span class="hljs-comment"># filter results by class, i.e. class=0, or class=[0,2,3]</span><br>retina_masks: <span class="hljs-literal">False</span>  <span class="hljs-comment"># use high-resolution segmentation masks</span><br>boxes: <span class="hljs-literal">True</span> <span class="hljs-comment"># Show boxes in segmentation predictions</span><br></code></pre></td></tr></table></figure><p>主要填写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">source  <span class="hljs-comment"># 源文件路径，可以是图片或视频</span><br>show  <span class="hljs-comment"># 是否展示图片或视频</span><br>classes  <span class="hljs-comment"># 显示哪些类别，类别在上文的 coco.yaml 中列出</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yolo predict model=yolov8n.pt <span class="hljs-built_in">source</span>=<span class="hljs-string">&quot;https://ultralytics.com/images/bus.jpg&quot;</span> show classes=0<br></code></pre></td></tr></table></figure><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/bus.jpg" alt="bus"></p><p>YOLOv8 也可以在 Python 中调用，详情可查看官方 <a href="https://docs.ultralytics.com/">Docs</a>。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/yolov8_preview_and_guide/docs.png" alt="docs"></p><ul><li>个人博客：<a href="https://blog.jasperxzy.com">JasperX’s Blog</a></li><li>欢迎关注我的 <a href="https://blog.csdn.net/JasperXzy">CSDN</a>、<a href="https://www.zhihu.com/people/jasper-xu-36">知乎</a>，或者在下方留下你的评论，Bye！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Yolo</tag>
      
      <tag>Object Detection</tag>
      
      <tag>Image classification</tag>
      
      <tag>Instance segmentation</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>PyTorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium 自动化测试之纪念币预约</title>
    <link href="/article/auto_commemorative_coin_booking.html"/>
    <url>/article/auto_commemorative_coin_booking.html</url>
    
    <content type="html"><![CDATA[<h1>摘要</h1><p>前段时间，2023 贺岁纪念币的预约火热地进行着，当晚我也凭借惊人的手速抢到了 3 *20 = 60 个，某天偶然打开农行预约纪念币网的站，发现预约端口还未关闭，便想着用 Selenium 自动化测试来实现全自动预约纪念币。</p><p class="note note-info">本文使用的技术包括但不仅限于：Python、Selenium-Python、OCR、CNN、Android adb</p><p class="note note-warning">声明：本文只用于技术分享，禁止使用本文代码参与各种不当获利行为</p><h1>Part I：基本 Selenium 自动化</h1><p>打开<a href="https://eapply.abchina.com/coin/coin/Index">农行纪念币预约网址</a>，进入纪念币预约，可见布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/welcome_page.png" alt="welcome_page"></p><p>接下来就是基本的 Selenium 自动化了，<code>F12</code>打开开发者工具，查看 “ 预约 ” 的 Xpath，但通过两次纪念币预约，我发现该元素的 Xpath 是随纪念币更改的，故每次要提前进入该网址获取本次预约的 Xpath。</p><p class="info">将所有配置文件放在<code>general_settings.py</code>方便管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 驱动路径</span><br>path_chrome = Service_Chrome(<span class="hljs-string">&quot;../driver/chromedriver.exe&quot;</span>)<br><br><span class="hljs-comment"># 预约链接</span><br>booking_url = <span class="hljs-string">&quot;https://eapply.abchina.com/coin/Coin/CoinIssuesDistribution?typeid=202301&quot;</span><br><br><span class="hljs-comment"># 预约界面 Xpath</span><br>welcome_page_xpath = <span class="hljs-string">&#x27;/html/body/div[5]/div[2]/table/tbody/tr[5]/td[4]/input[1]&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br>browser = webdriver.Chrome(service=general_settings.path_chrome)  <span class="hljs-comment"># 使用 Chrome 驱动</span><br>browser.get(general_settings.booking_url)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome_page</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    欢迎页面</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, general_settings.welcome_page_xpath).click()<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;I128&quot;]/button[1]&#x27;</span>).click()  <span class="hljs-comment"># 同意并继续</span><br></code></pre></td></tr></table></figure><p>接下来，进入今天我们的主战场，布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/booking_main.png" alt="booking_main"></p><p>我将此页面分为如下五个部分：</p><ol><li>基本个人信息（姓名、证件号码、手机号码）</li><li>图形验证码</li><li>短信验证码</li><li>兑换网点</li><li>兑换时间</li></ol><p>其中，1、4、5 在本 Part 展示，2、3 将在下文展示。</p><h2 id="1-基本个人信息">1. 基本个人信息</h2><p>由于本次自动化是多线程同时进行，且为了个人信息安全和后期再有纪念币预约可以直接使用，故将个人信息放入 MySQL 数据库中，使用 Python 第三方库 pymysql 获取数据库信息并填写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 数据库信息</span><br>host = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 主机名（IP）</span><br>port = <span class="hljs-number">3306</span>  <span class="hljs-comment"># 数据库端口，默认为 3306</span><br>user = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 数据库用户名</span><br>password = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 数据库密码</span><br>database = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 信息所在 database（数据库）</span><br>table = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 信息所在 table（表）</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_get</span>(<span class="hljs-params">host: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span>, user: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, database: <span class="hljs-built_in">str</span>, table: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    通过 MySQL 数据库获取信息</span><br><span class="hljs-string">    :param host: 主机名（IP）</span><br><span class="hljs-string">    :param port: 数据库端口</span><br><span class="hljs-string">    :param user: 数据库用户名</span><br><span class="hljs-string">    :param password: 数据库密码</span><br><span class="hljs-string">    :param database: 信息所在 database</span><br><span class="hljs-string">    :param table: 信息所在 table</span><br><span class="hljs-string">    :return: 信息的元组</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    info_MySQL = Connection(<br>        host=host,<br>        port=port,<br>        user=user,<br>        password=password<br>    )  <span class="hljs-comment"># 连接数据库</span><br>    cursor = info_MySQL.cursor() <br>    info_MySQL.select_db(database)  <br>    cursor.execute(<span class="hljs-string">f&#x27;SELECT *  FROM <span class="hljs-subst">&#123;table&#125;</span>;&#x27;</span>)<br>    result = cursor.fetchall()  <span class="hljs-comment"># 获取所有信息</span><br>    info_mysql = result[thread_index]  <span class="hljs-comment"># 获取对应进程的个人信息</span><br>    cursor.close()<br>    info_MySQL.close()<br>    <span class="hljs-keyword">return</span> info_mysql<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_info</span>(<span class="hljs-params">info: <span class="hljs-built_in">tuple</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    填写信息函数</span><br><span class="hljs-string">    :param info: 信息元组</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;name&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 姓名</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;identNo&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 身份证号</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;mobile&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">3</span>])  <span class="hljs-comment"># 电话号码</span><br></code></pre></td></tr></table></figure><h2 id="2-兑换网点">2. 兑换网点</h2><p>兑换网点是一个下拉框对象，可以使用 Selenium 中 Select 函数对网点进行选择。省行、分行、支行都很顺利，但营业处选项遇到了一些问题，营业处的文本为 “营业处 + 当前剩余纪念币数”，若使用<code>select_by_index</code>会导致不知道默认选择的营业处是否还有纪念币。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/problem_place.png" alt="problem_place"></p><p>故做以下修改：先选择默认营业处，若默认营业处剩余纪念币数 &lt;= 20，则对营业处的列表进行遍历，选择剩余纪念币数 &gt;= 20 的营业处，若都没有剩余，则输出 “ 该营业处没有剩余纪念币 ”。当然，你也可以再对支行、分行甚至省行（只要你能跑）的列表进行遍历，选择有剩余的营业处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 预约地址</span><br>place_arr = [<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">4</span>]  <span class="hljs-comment"># 分别为 [省行, 分行, 支行, 默认营业厅序号（从 1 开始为第一个）]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_place</span>(<span class="hljs-params">province: <span class="hljs-built_in">str</span>, city: <span class="hljs-built_in">str</span>, country: <span class="hljs-built_in">str</span>, default_bank_index: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    选择兑换网点</span><br><span class="hljs-string">    :param province: 省行名称</span><br><span class="hljs-string">    :param city: 分行名称</span><br><span class="hljs-string">    :param country: 支行名称</span><br><span class="hljs-string">    :param default_bank_index: 默认营业处序号（从 1 开始为第一个营业处）</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    select_province = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel1&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择省行</span><br>    Select(select_province).select_by_visible_text(province)<br>  <br>select_city = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel2&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择分行</span><br>    Select(select_city).select_by_visible_text(city)<br><br>    select_country = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel3&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择支行</span><br>    Select(select_country).select_by_visible_text(country)<br><br>    select_bank = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel4&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择营业处</span><br>    bank_text = select_bank.text<br>    bank_arr = bank_text.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>    default_coin_number = bank_arr[default_bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br><br>    <span class="hljs-comment"># 判断该营业处是否有剩余纪念币</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(default_coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>        Select(select_bank).select_by_index(default_bank_index)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> bank_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(bank_arr)):<br>            coin_number = bank_arr[bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>                Select(select_bank).select_by_index(bank_index)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进程<span class="hljs-subst">&#123;thread_index&#125;</span> 没有营业厅有纪念币了...&quot;</span>)<br>                <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="3-兑换时间">3. 兑换时间</h2><p>选择时间可以通过两次定位来实现，但是速度较慢且 Xpath 路径不好写，且有时会涉及到 frame ，此时需要切换 frame，比较麻烦。所以本文使用 js 来处理时间控件，实现原理为删除 input 的 readonly 属性，直接输入日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 兑换时间</span><br>coindate = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 按照&#x27;年-月-日&#x27;输入日期，例如：&#x27;2023-01-01&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coin_date</span>(<span class="hljs-params">coindate: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    选择兑换时间</span><br><span class="hljs-string">    :param coindate: 兑换时间</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    js_date = <span class="hljs-string">&#x27;document.getElementById(&quot;coindate&quot;).removeAttribute(&quot;readonly&quot;);&#x27;</span>  <span class="hljs-comment"># 执行 js 代码去除 readonly 属性</span><br>    browser.execute_script(js_date)<br>    browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).clear()  <span class="hljs-comment"># 清除输入框</span><br>    browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).send_keys(coindate)  <span class="hljs-comment"># 输入日期</span><br></code></pre></td></tr></table></figure><p>至此，基本的 Selenium 自动化已经完成。接下来，就是本文的核心：图像验证码与短信验证码。</p><h1>Part II：图形验证码</h1><h2 id="1-图形验证码数据集获取">1. 图形验证码数据集获取</h2><p>既然选择用深度学习识别验证码，首先就是获取验证码数据集。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha_url.png" alt="pic_captcha_url"></p><p>在预约界面查找元素可知验证码的 src，刷新后会显示不同的图形验证码，这样图形验证码的数据源就搞定了。下面就是使用 requests 库爬取图形验证码，并以二进制方式写入到本地文件，这里一共爬取 3000 张验证码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># captcha_get.py</span><br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">f&#x27;https://eapply.abchina.com/coin/Helper/ValidCode.ashx&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>)<br><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3000</span>):<br>    file = <span class="hljs-string">f&#x27;./pic_captcha/captcha_<span class="hljs-subst">&#123;index&#125;</span>.png&#x27;</span><br>    re = requests.get(url)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(re.content)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;captcha_<span class="hljs-subst">&#123;index&#125;</span> finished...&#x27;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>但由于这些验证码之后还需要进行标注，比较麻烦，特此将我用 2captcha 标注好的 3000 张验证码贴出来，格式为 &quot; 验证码_piccaptcha+hash.png &quot;。（别问我为什么不直接用 2captcha，因为一个验证码要 5 s，这速度还不如直接手动输入）</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha.png" alt="pic_captcha"></p><p><a class="btn" href="https://www.kaggle.com/datasets/jasperxzy/pic-captcha-abc/download?datasetVersionNumber=1" title="Dataset">下载数据集 - Kaggle</a></p><p><a class="btn" href="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/PIC_CAPTCHA.zip" title="Dataset">下载数据集 - AliCloud</a></p><h2 id="2-训练模型">2. 训练模型</h2><p>下面介绍本文采用的 CNN 模型 ocr_jasper，基于 mobildenetv2 修改而来，下图为网络结构。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/ocr_jasper_network.png" alt="ocr_jasper_network"></p><p>训练代码在此就不详细说明了，详情可看仓库中 ” ocr_jasper_train “ 内的 <code>README.md</code> 。训练完成后，会得到 <code>model.onnx</code> 和 <code>charsets.json</code> 两个文件，分别为模型文件和字符集文件，这两个文件需配合 ocr_jasper 库使用。</p><h2 id="3-获取页面中图形验证码">3. 获取页面中图形验证码</h2><p>上文爬取验证码时提到过，图形验证码的数据源是一条链接，所以无法直接通过链接直接下载图形验证码，故对图形验证码的元素进行截图并保存，方便 ocr_jasper 调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_save</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    定位验证码进行截图</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    captcha_img = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccaptcha&quot;]&#x27;</span>)  <span class="hljs-comment"># 要截图的元素</span><br>    x, y = captcha_img.location.values()  <span class="hljs-comment"># 坐标</span><br>    h, w = captcha_img.size.values()  <span class="hljs-comment"># 宽高</span><br>    image_data = browser.get_screenshot_as_png()  <span class="hljs-comment"># 把截图以二进制形式的数据返回</span><br>    screenshot = Image.<span class="hljs-built_in">open</span>(BytesIO(image_data))  <span class="hljs-comment"># 以新图片打开返回的数据</span><br>    result = screenshot.crop((x, y, x + w, y + h))  <span class="hljs-comment"># 对截图进行裁剪</span><br>    result.save(<span class="hljs-string">f&#x27;./Captcha/pic_captcha_thread<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-使用-ocr-jasper-识别图形验证码">4. 使用 ocr_jasper 识别图形验证码</h2><p>现在，就可以通过调用 ocr_jasper 来对图形验证码进行识别了，ocr_jasper 可以从本文的仓库中获取，在 CMD 或 Anaconda Prompt 中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install &#123;ocr_jasper&#125; <span class="hljs-comment"># 将 &#123;ocr_jasper&#125; 替换为 ocr_jasper 的相对或绝对路径 </span><br></code></pre></td></tr></table></figure><p>接下来就可以在代码中调用 ocr_jasper 了，将代码中<code>import_onnx_path</code>和<code>charsets_path</code>修改为训练好的模型和字符集文件的相对或绝对路径，默认放在项目根目录下的 Models 文件夹中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_recognition</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用 ocr_jasper 识别图形验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ocr_pic = ocr_jasper.OCR(import_onnx_path=<span class="hljs-string">&#x27;./Models/model.onnx&#x27;</span>,charsets_path=<span class="hljs-string">&quot;./Models/charsets.json&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/pic_captcha_thread<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        image = f.read()<br>    captcha_recognized = ocr_pic.classification(image)<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccode&quot;]&#x27;</span>).send_keys(captcha_recognized)  <span class="hljs-comment"># 验证码输入框</span><br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text_captcha</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取短信验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;sendValidate&quot;]&#x27;</span>).click() <br></code></pre></td></tr></table></figure><h2 id="5-判断图形验证码是否识别正确">5. 判断图形验证码是否识别正确</h2><p>有时 ocr 会抽风，无法正确识别图形验证码，在此添加一个函数来判断是否识别正确。当识别错误时，id 为 <code>errorCaptchaNo</code>的元素会变成 ” 图形验证码错误 “；识别正确时，会变为 ” 短信验证码已发送成功 “，所以可以通过该元素文本长度来判断图形验证码是否识别正确。又因为<code>captcha_success</code>变量会跨函数多次调用，故将其定义为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">captcha</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    判断图形验证码是否正确</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> captcha_success<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pic_captcha_save()<br>        time.sleep(<span class="hljs-number">1</span>)<br>        pic_captcha_recognition()<br>        get_text_captcha()<br>        time.sleep(<span class="hljs-number">0.5</span>)<br>        is_captcha_error = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;errorCaptchaNo&quot;]&#x27;</span>).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(is_captcha_error) == <span class="hljs-number">7</span>:<br>            browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccaptcha&quot;]&#x27;</span>).click()  <span class="hljs-comment"># 重新获取验证码</span><br>            browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;piccode&quot;]&#x27;</span>).clear()<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(is_captcha_error) == <span class="hljs-number">10</span>:<br>            captcha_success = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1>Part III：短信验证码</h1><p>安卓系统获取手机短信验证码的方式有多种，可以通过短信数据库<code>mmssms.db</code>（需 root）或其他第三方平台进行获取，本文选择 adb 手机截屏 + ocr_jasper 识别的解决方案。（尊贵的 iOS 用户请自行解决本 Part）</p><h2 id="1-截图并裁剪短信验证码">1. 截图并裁剪短信验证码</h2><p>在电脑上装好对应的手机驱动，手机打开开发者模式并开启 USB 调试，将手机通过 adb 连接到电脑后，可通过<code>adb devices</code>查看是否连接成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><br><span class="hljs-comment"># 短信验证码剪裁范围，坐标为 [y_0: y_1, x_0: x_1]</span><br>y_0 = <span class="hljs-number">1550</span><br>y_1 = <span class="hljs-number">1620</span><br>x_0 = <span class="hljs-number">125</span><br>x_1 = <span class="hljs-number">345</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_save</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    保存验证码的屏幕截图并裁剪验证码</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    text_captcha_path = <span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span><br>    os.system(<span class="hljs-string">&#x27;adb shell screencap -p &gt; &#x27;</span> + text_captcha_path)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(text_captcha_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    text_captcha = data.replace(<span class="hljs-string">b&#x27;\r\n&#x27;</span>, <span class="hljs-string">b&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(text_captcha)<br>    raw_image = cv2.imread(<span class="hljs-string">f&#x27;./Captcha/text_captcha_tmp<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>)<br>    cropped_image = raw_image[general_settings.y_0:general_settings.y_1, general_settings.x_0:general_settings.x_1] <br>    cv2.imwrite(<span class="hljs-string">f&#x27;./Captcha/text_captcha_<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, cropped_image)<br></code></pre></td></tr></table></figure><h2 id="2-使用-ocr-jasper-识别短信验证码">2. 使用 ocr_jasper 识别短信验证码</h2><p>和上文一样，调用 ocr_jasper 识别短信验证码，但本次不需要指定<code>import_onnx_path</code>和<code>charsets_path</code>，因为 ocr_jasper 内置了一个通用模型，对数字识别准确率接近 100%，而上文不使用内置模型的原因是此模型还包括 Unicode 编码中的所有汉字，会对图形验证码识别准确率有较大影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_recognition</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    短信验证码识别</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    ocr_text = ocr_jasper.OCR(use_gpu=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./Captcha/text_captcha_<span class="hljs-subst">&#123;thread_index&#125;</span>.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        image = f.read()<br>    captcha_recognized = ocr_text.classification(image)<br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;phoneCaptchaNo&quot;]&#x27;</span>).send_keys(captcha_recognized)<br></code></pre></td></tr></table></figure><h2 id="3-信息提交">3. 信息提交</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_submit</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    提交信息函数</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;infosubmit&quot;]&#x27;</span>).click() <br></code></pre></td></tr></table></figure><h1>Part IV：主进程函数与多线程</h1><p>由于全局变量跨文件使用比较麻烦，故将上述代码封装到主进程函数<code>main_func</code>函数中，结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main_func</span>(<span class="hljs-params">thread_index: <span class="hljs-built_in">int</span>, place: <span class="hljs-built_in">list</span>, date: <span class="hljs-built_in">str</span>, input_enable: <span class="hljs-built_in">bool</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主进程</span><br><span class="hljs-string">    :param thread_index: 进程序号</span><br><span class="hljs-string">    :param place: 预约地址列表</span><br><span class="hljs-string">    :param date: 预约时间</span><br><span class="hljs-string">    :param input_enable: 是否为最后一个进程</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> captcha_success<br>    browser = webdriver.Chrome(service=general_settings.path_chrome)<br>    browser.get(general_settings.booking_url)<br>    <br>    ---------functions mentioned above---------<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome_page</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_get</span>(<span class="hljs-params">host: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span>, user: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, database: <span class="hljs-built_in">str</span>, table: <span class="hljs-built_in">str</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_info</span>(<span class="hljs-params">info: <span class="hljs-built_in">tuple</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_place</span>(<span class="hljs-params">province: <span class="hljs-built_in">str</span>, city: <span class="hljs-built_in">str</span>, country: <span class="hljs-built_in">str</span>, default_bank_index: <span class="hljs-built_in">int</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">coin_date</span>(<span class="hljs-params">coindate: <span class="hljs-built_in">str</span></span>):<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_save</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pic_captcha_recognition</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text_captcha</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">captcha</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_save</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">text_captcha_recognition</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_submit</span>():<br>        ------------<br>        <br>    <span class="hljs-keyword">try</span>:<br>        welcome_page()<br>        info_tuple = info_get(host=general_settings.host,<br>                              port=general_settings.port,<br>                              user=general_settings.user,<br>                              password=general_settings.password,<br>                              database=general_settings.database,<br>                              table=general_settings.table)<br>        fill_info(info=info_tuple)<br>        choose_place(place[<span class="hljs-number">0</span>], place[<span class="hljs-number">1</span>], place[<span class="hljs-number">2</span>], place[<span class="hljs-number">3</span>])<br>        coin_date(coindate=date)<br>        captcha()<br>        time.sleep(<span class="hljs-number">3</span>)<br>        text_captcha_save()<br>        text_captcha_recognition()<br>        info_submit()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">if</span> input_enable:<br>        <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><p>既然是 Selenium 自动化调试，就要充分发挥多线程的优势，但由于短信验证码只能挨个获取，所以在此项目中以短信验证码成功发送作为下一个进程开始的标志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><br>is_input_enable = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> current_thread <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(general_settings.threads):<br>    <span class="hljs-keyword">if</span> current_thread == general_settings.threads - <span class="hljs-number">1</span>:<br>        is_input_enable = <span class="hljs-literal">True</span><br>    threading.Thread(target=main_func, args=(current_thread,<br>                                             general_settings.place_arr,<br>                                             general_settings.coindate,<br>                                             is_input_enable)).start()<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> captcha_success:<br>            time.sleep(<span class="hljs-number">1</span>)<br>            captcha_success = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h1>结语</h1><ul><li><p>经过测试，预约 10 人的时间在 45 - 55 s 左右，速度还可以，但有些地方还可以再优化，如加载 csv 文件获取个人信息、使用多台手机同时接受短信验证码等，上述功能可能会在以后的更新中添加。</p></li><li><p>拖慢本程序的罪魁祸首是短信验证码发送的延迟，实测大约在 3.5 s 左右，像中行和工商银行等不需要短信验证的网站，速度将会直接起飞。</p></li><li><p>个人博客：<a href="https://blog.jasperxzy.com">JasperX’s Blog</a></p></li><li><p>本文仓库：<a href="https://github.com/JasperXzy/auto_commemorative_coin_booking">Github</a></p></li></ul><p>以上就是本次自动化测试预约纪念币的所有内容了，如果你喜欢我，欢迎关注我的 <a href="https://blog.csdn.net/JasperXzy">CSDN</a>、<a href="https://www.zhihu.com/people/jasper-xu-36">知乎</a>，或者在下方留下你的评论，Bye！</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
      <tag>Python</tag>
      
      <tag>OCR</tag>
      
      <tag>CNN</tag>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
