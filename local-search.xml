<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python 自动化之纪念币预约</title>
    <link href="/article/auto_commemorative_coin_booking.html"/>
    <url>/article/auto_commemorative_coin_booking.html</url>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>前段时间，2023 贺岁纪念币的预约如火如荼地进行着，当晚我也凭借惊人的手速抢到了 3 *20 &#x3D; 60 个，某天偶然打开农行预约纪念币网站，发现预约端口还未关闭，便想着用 Python 擅长的方面 - 自动化 来实现一站式全自动预约纪念币。</p><p class="note note-info">本文使用的技术包括但不仅限于：Python、Selenium-Python、OCR、CNN、Android adb</p><p class="note note-warning">声明：本文只用于技术分享，禁止使用本文代码参与各种不当获利行为</p><h1 id="Part-1：基本-Selenium-自动化"><a href="#Part-1：基本-Selenium-自动化" class="headerlink" title="Part 1：基本 Selenium 自动化"></a>Part 1：基本 Selenium 自动化</h1><p>打开<a href="https://eapply.abchina.com/coin/coin/Index">农行纪念币预约网址</a>，进入纪念币预约，可见布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/welcome_page.png" alt="welcome_page"></p><p>接下来就是基本的 Selenium 自动化了，<code>F12</code>打开开发者工具，查看 “ 预约 ” 的 Xpath，但通过两次纪念币预约，我发现该元素的 Xpath 是随纪念币更改的，故每次要提前进入该网址获取本次预约的 Xpath。</p><p class="info">将所有设置文件放在<code>general_settings.py</code>方便管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># general_settings.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service <span class="hljs-keyword">as</span> Service_Chrome<br><br><br>path_chrome = Service_Chrome(<span class="hljs-string">&quot;./driver/chromedriver.exe&quot;</span>)<br>booking_url = <span class="hljs-string">&quot;https://eapply.abchina.com/coin/Coin/CoinIssuesDistribution?typeid=202301&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> general_settings<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><br><br>browser = webdriver.Chrome(service=general_settings.path_chrome)  <span class="hljs-comment"># 使用 Chrome 驱动</span><br>browser.get(general_settings.booking_url)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome_page</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        欢迎页面</span><br><span class="hljs-string">        :return: None</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        browser.find_element(By.XPATH, general_settings.welcome_page_xpath).click()<br>        browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;I128&quot;]/button[1]&#x27;</span>).click()  <span class="hljs-comment"># 同意并继续</span><br></code></pre></td></tr></table></figure><p>接下来，进入今天我们的主战场，布局如下：</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/booking_main.png" alt="booking_main"></p><p>我将此页面分为如下五个部分：</p><ol><li>基本个人信息（姓名、证件号码、手机号码）</li><li>图形验证码</li><li>短信验证码</li><li>兑换网点</li><li>兑换时间</li></ol><p>其中，1、4、5 在本 Part 展示，2、3 将在下文展示。</p><h2 id="1-基本个人信息"><a href="#1-基本个人信息" class="headerlink" title="1. 基本个人信息"></a>1. 基本个人信息</h2><p>由于本次自动化是多线程同时进行，且为了个人信息安全和后期再有纪念币预约可以直接使用，故将个人信息放入 MySQL 数据库中，使用 Python 第三方库 pymysql 获取数据库信息并填写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_get</span>(<span class="hljs-params">host: <span class="hljs-built_in">str</span>, port: <span class="hljs-built_in">int</span>, user: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, database: <span class="hljs-built_in">str</span>, table: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        通过 MySQL 数据库获取信息</span><br><span class="hljs-string">        :param host: 主机名</span><br><span class="hljs-string">        :param port: 端口</span><br><span class="hljs-string">        :param user: 账户</span><br><span class="hljs-string">        :param password: 密码</span><br><span class="hljs-string">        :param database: 信息所在数据库</span><br><span class="hljs-string">        :param table: 信息所在表</span><br><span class="hljs-string">        :return: 信息的元组</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        info_MySQL = Connection(<br>            host=host,<br>            port=port,<br>            user=user,<br>            password=password<br>        )  <span class="hljs-comment"># 连接数据库</span><br>        cursor = info_MySQL.cursor() <br>        info_MySQL.select_db(database)  <br>        cursor.execute(<span class="hljs-string">f&#x27;SELECT *  FROM <span class="hljs-subst">&#123;table&#125;</span>;&#x27;</span>)<br>        result = cursor.fetchall()  <span class="hljs-comment"># 获取所有信息</span><br>        info_mysql = result[thread_index]  <span class="hljs-comment"># 获取对应进程的个人信息</span><br>        cursor.close()<br>        info_MySQL.close()<br>        <span class="hljs-keyword">return</span> info_mysql<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_info</span>(<span class="hljs-params">info: <span class="hljs-built_in">tuple</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        填写信息函数</span><br><span class="hljs-string">        :param info: 信息元组</span><br><span class="hljs-string">        :return: None</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;name&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 姓名</span><br>        browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;identNo&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 身份证号</span><br>        browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;mobile&quot;]&#x27;</span>).send_keys(info[<span class="hljs-number">3</span>])  <span class="hljs-comment"># 电话号码</span><br></code></pre></td></tr></table></figure><h2 id="2-兑换网点"><a href="#2-兑换网点" class="headerlink" title="2. 兑换网点"></a>2. 兑换网点</h2><p>兑换网点是一个下拉框对象，可以使用 Selenium 中 Select 函数对网点进行选择。省行、分行、支行都很顺利，但营业处选项遇到了一些问题，营业处的文本为 “营业处 + 当前剩余纪念币数”，若使用<code>select_by_index</code>会导致不知道默认选择的营业处是否还有纪念币。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/problem_place.png" alt="problem_place"></p><p>故做以下修改：先选择默认营业处，若默认营业处剩余纪念币数 &lt;&#x3D; 20，则对营业处的列表进行遍历，选择剩余纪念币数 &gt;&#x3D; 20 的营业处，若都没有剩余，则输出 “ 该营业处没有剩余纪念币 ”。当然，你也可以再对支行、分行甚至省行（只要你能跑）的列表进行遍历，选择有剩余的营业处。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.select <span class="hljs-keyword">import</span> Select<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choose_place</span>(<span class="hljs-params">province: <span class="hljs-built_in">str</span>, city: <span class="hljs-built_in">str</span>, country: <span class="hljs-built_in">str</span>, default_bank_index: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        选择兑换网点</span><br><span class="hljs-string">        :param province: 省行名称</span><br><span class="hljs-string">        :param city: 分行名称</span><br><span class="hljs-string">        :param country: 支行名称</span><br><span class="hljs-string">        :param default_bank_index: 默认营业处序号（从 1 开始为第一个营业处）</span><br><span class="hljs-string">        :return: None</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        select_province = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel1&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择省行</span><br>        Select(select_province).select_by_visible_text(province)<br><br>        select_city = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel2&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择分行</span><br>        Select(select_city).select_by_visible_text(city)<br><br>        select_country = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel3&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择支行</span><br>        Select(select_country).select_by_visible_text(country)<br><br>        select_bank = browser.find_element(By.XPATH, <span class="hljs-string">&#x27;//*[@id=&quot;orglevel4&quot;]&#x27;</span>)  <span class="hljs-comment"># 选择营业处</span><br>        bank_text = select_bank.text<br>        bank_arr = bank_text.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>        default_coin_number = bank_arr[default_bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br><br>        <span class="hljs-comment"># 判断该营业处是否有剩余纪念币</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(default_coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>            Select(select_bank).select_by_index(default_bank_index)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> bank_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(bank_arr)):<br>                coin_number = bank_arr[bank_index].split(<span class="hljs-string">&quot; &quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(coin_number[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">20</span>:<br>                    Select(select_bank).select_by_index(bank_index)<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进程<span class="hljs-subst">&#123;thread_index&#125;</span> 没有营业厅有纪念币了...&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="3-兑换时间"><a href="#3-兑换时间" class="headerlink" title="3. 兑换时间"></a>3. 兑换时间</h2><p>选择时间可以通过两次定位来实现，但是速度较慢且 Xpath 路径不好写，且有时会涉及到 frame ，此时需要切换 frame，比较麻烦。所以本文使用 js 来处理时间控件，实现原理为删除 input 的 readonly 属性，直接输入日期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coin_date</span>(<span class="hljs-params">coindate: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        选择兑换时间函数</span><br><span class="hljs-string">        :param coindate: 按照&#x27;年-月-日&#x27;输入日期，例如：&#x27;2023-01-01&#x27;</span><br><span class="hljs-string">        :return: None</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        js_date = <span class="hljs-string">&#x27;document.getElementById(&quot;coindate&quot;).removeAttribute(&quot;readonly&quot;);&#x27;</span>  <span class="hljs-comment"># 执行 js 代码去除 readonly 属性</span><br>        browser.execute_script(js_date)<br>        browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).clear()  <span class="hljs-comment"># 清除输入框</span><br>        browser.find_element(By.ID, <span class="hljs-string">&#x27;coindate&#x27;</span>).send_keys(coindate)  <span class="hljs-comment"># 输入日期</span><br></code></pre></td></tr></table></figure><p>至此，基本的 Selenium 自动化已经完成。接下来，就是本文的核心：图像验证码与短信验证码。</p><h1 id="Part-2：图形验证码"><a href="#Part-2：图形验证码" class="headerlink" title="Part 2：图形验证码"></a>Part 2：图形验证码</h1><h2 id="1-图形验证码数据集获取"><a href="#1-图形验证码数据集获取" class="headerlink" title="1. 图形验证码数据集获取"></a>1. 图形验证码数据集获取</h2><p>既然选择用深度学习识别验证码，首先就是获取验证码数据集。</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha_url.png" alt="pic_captcha_url"></p><p>在预约界面查找元素可知验证码的 src，刷新后会显示不同的图形验证码，这样图形验证码的数据源就搞定了。下面就是使用 requests 库爬取图形验证码，并以二进制方式写入到本地文件，这里一共爬取 3000 张验证码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># captcha_get.py</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">f&#x27;https://eapply.abchina.com/coin/Helper/ValidCode.ashx&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>):<br>    os.makedirs(<span class="hljs-string">&#x27;./pic_captcha&#x27;</span>)<br><br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3000</span>):<br>        file = <span class="hljs-string">f&#x27;./pic_captcha/captcha_<span class="hljs-subst">&#123;index&#125;</span>.png&#x27;</span><br>        re = requests.get(url)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(re.content)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;captcha_<span class="hljs-subst">&#123;index&#125;</span> finished...&#x27;</span>)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>但由于这些验证码之后还需要进行标注，比较麻烦，特此将我用 2captcha 标注好的 3000 张验证码贴出来，格式为 “ 验证码_piccaptcha+hash.png “。（别问我为什么不直接用 2captcha，因为一个验证码要 5 s，这速度还不如直接手动输入）</p><p><img src="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/pic_captcha.png" alt="pic_captcha.png"></p><p><a class="btn" href="https://www.kaggle.com/datasets/jasperxzy/pic-captcha-abc/download?datasetVersionNumber=1" title="Dataset">下载数据集 - Kaggle</a></p><p><a class="btn" href="https://blog-jasperxzy.oss-cn-shanghai.aliyuncs.com/post_images/auto_commemorative_coin_booking/PIC_CAPTCHA.zip" title="Dataset">下载数据集 - AliCloud</a></p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
      <tag>Python</tag>
      
      <tag>OCR</tag>
      
      <tag>CNN</tag>
      
      <tag>adb</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
